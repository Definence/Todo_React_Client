{"src/index.js":{"hash":"2a92ecb4dec1e9fa7cad7415bf1033e3","res":{"results":[{"filePath":"/home/milestep/code/todo-react-client/src/index.js","messages":[],"errorCount":0,"warningCount":0}],"errorCount":0,"warningCount":0}},"src/reducers/index.js":{"hash":"15cb65968ab896b0a26c04474dc14f0b","res":{"results":[{"filePath":"/home/milestep/code/todo-react-client/src/reducers/index.js","messages":[],"errorCount":0,"warningCount":0}],"errorCount":0,"warningCount":0}},"src/components/tasks/tasks_index.js":{"hash":"e17f22581f75d85f575474907d3ba3aa","res":{"results":[{"filePath":"/home/milestep/code/todo-react-client/src/components/tasks/tasks_index.js","messages":[],"errorCount":0,"warningCount":0}],"errorCount":0,"warningCount":0}},"src/components/tasks/tasks_edition.js":{"hash":"80d8a6a035fb843f387e293049b174fa","res":{"results":[{"filePath":"/home/milestep/code/todo-react-client/src/components/tasks/tasks_edition.js","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'getTasks' is defined but never used.","line":5,"column":10,"nodeType":"Identifier","source":"import { getTasks, getTask, editTask } from '../../actions/tasks';"}],"errorCount":0,"warningCount":1,"source":"import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport Navbar from '../layouts/navbar';\nimport { getTasks, getTask, editTask } from '../../actions/tasks';\nimport Notification from '../layouts/notification';\n\n\nclass Tasks_Edition extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      task: {}\n    };\n  }\n\n  static contextTypes = {\n    store: React.PropTypes.object\n  };\n\n  //витягує з бекенду пропси таска\n  componentDidMount () {\n    let id = this.props.params.id;\n    this.context.store.dispatch(getTask(id))\n      .then(response => {\n        this.setState({task: response.data});\n      })\n  };\n\n  // // сетить стейт із пропсів(замінили на проміс в componentDidMount)\n  // // ел життєвого циклу\n  // componentWillReceiveProps(nextProps) {\n  //   // назначає стейт таска пропси, що прийшли зі стора\n  //   this.setState({task: nextProps.tasks_edition});\n  // }\n\n  handleChange(field, e) {\n    // this.state.task[field] = element.target.value;\n    // this.setState({ task: this.state.task });\n    let new_task = Object.assign({}, this.state.task);\n    new_task[field] = e.target.value;\n    this.setState({ task: new_task });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    this.props.onEditTask(this.state.task);\n  }\n\n  render() {\n    const {task} = this.state;\n      return (\n        <div>\n          <Navbar />\n\n          <Notification />\n\n          <div className='container'>\n            <div className='col-sm-3' />\n\n            { task.title  &&\n              <div className='col-sm-6'>\n                <h2 className='text-center'>Task update</h2>\n\n                <form className='form-group' onSubmit={ this.handleSubmit.bind(this) } >\n                  <label>Title:</label>\n                  <input className='form-control' type=\"text\" value={task.title} name='title' onChange={this.handleChange.bind(this, 'title')} required minLength=\"5\" maxLength=\"30\" />\n\n                  <label>Description:</label>\n                  <input className='form-control' type=\"text\" value={task.description} name='description' onChange={this.handleChange.bind(this, 'description')} required />\n\n                  <label>Priority:</label>\n                  <input className='form-control' type=\"number\" value={task.priority} name='priority' onChange={this.handleChange.bind(this, 'priority')} required min=\"-9999\" max=\"9999\" />\n\n                  <label>Date:</label>\n                  <input className='form-control' type=\"date\" value={task.due_date} name='due_date' onChange={this.handleChange.bind(this, 'due_date')} required />\n\n                  <br/>\n\n                  <button type=\"submit\" className=\"btn btn-primary form-group\">Save</button>\n                </form>\n\n              </div>\n            }\n\n          </div>\n\n        </div>\n      );\n  }\n}\n\n//записує зі стора item в пропс task_edition\nexport default connect(\n  state => ({\n    tasks_edition: state.tasks.item\n  }),\n\n  dispatch => ({\n    onEditTask: (task) => {\n      dispatch(editTask(task));\n    }\n  })\n\n)(Tasks_Edition);"}],"errorCount":0,"warningCount":1}},"src/components/tasks/task_profile.js":{"hash":"34d125547d7031fcf304e2ffb1a04fc2","res":{"results":[{"filePath":"/home/milestep/code/todo-react-client/src/components/tasks/task_profile.js","messages":[],"errorCount":0,"warningCount":0}],"errorCount":0,"warningCount":0}},"src/components/users/sign_out.js":{"hash":"d227c4ee82c226dd5e71ca393790e2d2","res":{"results":[{"filePath":"/home/milestep/code/todo-react-client/src/components/users/sign_out.js","messages":[],"errorCount":0,"warningCount":0}],"errorCount":0,"warningCount":0}},"src/components/users/sign_up.js":{"hash":"1684e52170741f0f76abf141f3514ede","res":{"results":[{"filePath":"/home/milestep/code/todo-react-client/src/components/users/sign_up.js","messages":[],"errorCount":0,"warningCount":0}],"errorCount":0,"warningCount":0}},"src/components/users/log_in.js":{"hash":"cddf5d7e255ab83d3ea6bb6a7c602528","res":{"results":[{"filePath":"/home/milestep/code/todo-react-client/src/components/users/log_in.js","messages":[],"errorCount":0,"warningCount":0}],"errorCount":0,"warningCount":0}},"src/reducers/tasks.js":{"hash":"db53f87f7b7de1c8da089ecb0c734f69","res":{"results":[{"filePath":"/home/milestep/code/todo-react-client/src/reducers/tasks.js","messages":[],"errorCount":0,"warningCount":0}],"errorCount":0,"warningCount":0}},"src/components/layouts/menu.js":{"hash":"9520b211796e8e197238ec4d6efed8ae","res":{"results":[{"filePath":"/home/milestep/code/todo-react-client/src/components/layouts/menu.js","messages":[],"errorCount":0,"warningCount":0}],"errorCount":0,"warningCount":0}},"src/components/tasks/tasks_list.js":{"hash":"8de823fde716367fccfa086e5448f803","res":{"results":[{"filePath":"/home/milestep/code/todo-react-client/src/components/tasks/tasks_list.js","messages":[{"ruleId":"no-redeclare","severity":1,"message":"'tasks' is already defined.","line":69,"column":11,"nodeType":"Identifier","source":"      var tasks = this.props.tasks.sort(function (a, b) {"},{"ruleId":"array-callback-return","severity":1,"message":"Expected to return a value at the end of this function.","line":109,"column":39,"nodeType":"ArrowFunctionExpression","source":"        {this.props.tasks.map( (task) => {"},{"ruleId":"array-callback-return","severity":1,"message":"Expected to return a value at the end of this function.","line":146,"column":39,"nodeType":"ArrowFunctionExpression","source":"        {this.props.tasks.map( (task) => {"}],"errorCount":0,"warningCount":3,"source":"import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router';\n\nimport { sortTasks } from '../middlewares/sorted_tasks';\nimport {\n  getTasks,\n  deleteTask,\n  completeTask\n} from '../../actions/tasks';\n\n\nclass TasksList extends Component {\n  constructor() {\n    super();\n    this.state = {\n      tasks: []\n    }\n  }\n\n  //перевіряє чи зі стор  прийшли в пропси\n  static contextTypes = {\n    store: React.PropTypes.object\n  };\n\n  componentDidMount () {\n    this.context.store.dispatch(getTasks())\n      .then(response => {\n        this.setState({tasks: response.data});\n      })\n  }\n\n  // //замінили на componentDidMount(аналогія в tasks_edition)\n  // componentWillReceiveProps(nextProps) {\n  //   this.setState({tasks: nextProps.tasks});\n  //   console.log(nextProps.tasks)\n  // }\n\n  handleComplete (id, active) {\n    this.props.onCompleteTask(id, active);\n  }\n\n  handleDestroy (id) {\n    this.props.onDestroyTask(id);\n  }\n\n  handleCheckAll (boolean) {\n    if (boolean) {\n      return null;\n    } else {\n      return null;\n    }\n  }\n\n  sortTasks (type) {\n    if (type === 'title') {\n      var tasks = this.props.tasks.sort(function (a, b) {\n        if (a.title > b.title) {\n          return 1;\n        }\n        if (a.title < b.title) {\n          return -1;\n        }\n        // a должно быть равным b\n        return 0;\n      });\n\n    } else {\n      var tasks = this.props.tasks.sort(function (a, b) {\n        if (a.priority > b.priority) {\n          return 1;\n        }\n        if (a.priority < b.priority) {\n          return -1;\n        }\n        // a должно быть равным b\n        return 0;\n      });\n    }\n\n    this.setState({tasks: tasks});\n    this.props.onSortTasks(tasks);\n  }\n\n  render() {\n    return (\n      <div>\n        <div className='row'>\n          <div className='col-xs-3'>\n            <div onClick={ () => this.handleCheckAll(true) } className=\"glyphicon glyphicon-check btn-group btn\" />\n            <div onClick={ () => this.handleCheckAll(false) } className=\"glyphicon glyphicon-unchecked btn-group btn\" />\n          </div>\n          <div className='col-sm-9'>\n            <div className='btn-group btn'>\n              <div className=\"btn btn-group btn-info\" onClick={this.sortTasks.bind(this, 'title')}>\n                Sort by asc\n              </div>\n            </div>\n\n            <div className='btn-group btn'>\n              <div className=\"btn btn-group btn-info\" onClick={this.sortTasks.bind(this, 'priority')}>\n                Sort by priority\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <h3> Current tasks: </h3>\n        {this.props.tasks.map( (task) => {\n          if (!task.active) {\n\n            return (\n              <div key={task.id} className='container-fluid'>\n\n                <div className='col-xs-1'>\n                  <input type='checkbox' />\n                </div>\n\n                <div className=\"li_height hover1 for_icons\">\n\n                  <Link to={`/tasks/${task.id}/profile`} className='task_list' >\n                    <div className=\"col-xs-7\">{ task.title }</div>\n                  </Link>\n\n                  <div className=\"col-xs-1 priority\">{ task.priority }</div>\n                  <div className=\"col-xs-3 hover2 icons-block\" >\n\n                    <Link to={`/tasks/${task.id}/edit`} >\n                      <span className=\"glyphicon glyphicon-pencil\" title=\"Edit task\"></span>\n                    </Link>\n\n                    <span onClick={this.handleDestroy.bind(this, task.id)} className=\"glyphicon glyphicon-trash\" title=\"Delete task\"></span>\n\n                    <span onClick={this.handleComplete.bind(this, task.id, task.active)} className=\"glyphicon glyphicon-ok\" title=\"Mark as completed\"></span>\n\n                  </div>\n                </div>\n              </div>\n            );\n\n          }\n        })}\n\n        <h3> Completed tasks: </h3>\n\n        {this.props.tasks.map( (task) => {\n          if (task.active) {\n\n            return (\n              <div key={task.id} className='container-fluid'>\n\n                <div className='col-xs-1'>\n                  <input type='checkbox' />\n                </div>\n\n                <div className=\"li_height hover1 for_icons\">\n\n                  <Link to={`/tasks/${task.id}/profile`} className='task_list' >\n                    <div className=\"col-xs-7\">{ task.title }</div>\n                  </Link>\n\n                  <div className=\"col-xs-1 priority\">{ task.priority }</div>\n                  <div className=\"col-xs-3 hover2 icons-block\">\n\n                    <Link to={`/tasks/${task.id}/edit`} >\n                      <span className=\"glyphicon glyphicon-pencil\" title=\"Edit task\"></span>\n                    </Link>\n\n                    <span onClick={this.handleDestroy.bind(this, task.id)} className=\"glyphicon glyphicon-trash\" title=\"Delete task\"></span>\n\n                    <span onClick={this.handleComplete.bind(this, task.id, task.active)} className=\"glyphicon glyphicon-remove\" title=\"Mark as uncompleted\"></span>\n\n                  </div>\n                </div>\n              </div>\n            );\n\n          }\n        })}\n\n      </div>\n    );\n  }\n\n}\n\n\nexport default connect(\n  state => ({\n    tasks: state.tasks.items\n  }),\n  dispatch => ({\n\n    onDestroyTask: (id) => {\n      dispatch(deleteTask(id));\n    },\n\n    onCompleteTask: (id, active) => {\n      dispatch(completeTask(id, active));\n    },\n\n    onSortTasks: (tasks) => {\n      dispatch(sortTasks(tasks));\n    }\n\n  })\n)(TasksList);"}],"errorCount":0,"warningCount":3}},"src/components/tasks/task_form.js":{"hash":"2445d7b491b09bceec903695027f3eae","res":{"results":[{"filePath":"/home/milestep/code/todo-react-client/src/components/tasks/task_form.js","messages":[],"errorCount":0,"warningCount":0}],"errorCount":0,"warningCount":0}},"src/actions/tasks.js":{"hash":"da68341c8c0680b3a64d6e3d6cbb95a4","res":{"results":[{"filePath":"/home/milestep/code/todo-react-client/src/actions/tasks.js","messages":[],"errorCount":0,"warningCount":0}],"errorCount":0,"warningCount":0}},"src/actions/users.js":{"hash":"63d2c1a170f65158818f223649239b46","res":{"results":[{"filePath":"/home/milestep/code/todo-react-client/src/actions/users.js","messages":[],"errorCount":0,"warningCount":0}],"errorCount":0,"warningCount":0}},"src/components/users/sign_in.js":{"hash":"e7cc8722cb8643c261e145e10e72ef32","res":{"results":[{"filePath":"/home/milestep/code/todo-react-client/src/components/users/sign_in.js","messages":[],"errorCount":0,"warningCount":0}],"errorCount":0,"warningCount":0}},"src/components/constants/action_types.js":{"hash":"a5e5ac01877dfd7e9ad1fb7ec0c48f82","res":{"results":[{"filePath":"/home/milestep/code/todo-react-client/src/components/constants/action_types.js","messages":[],"errorCount":0,"warningCount":0}],"errorCount":0,"warningCount":0}},"src/components/middlewares/redirections.js":{"hash":"d41d8cd98f00b204e9800998ecf8427e","res":{"results":[{"filePath":"/home/milestep/code/todo-react-client/src/components/middlewares/redirections.js","messages":[],"errorCount":0,"warningCount":0}],"errorCount":0,"warningCount":0}},"src/components/constants/action_config.js":{"hash":"0bc8107adc733e084c568f1351fa4ba4","res":{"results":[{"filePath":"/home/milestep/code/todo-react-client/src/components/constants/action_config.js","messages":[],"errorCount":0,"warningCount":0}],"errorCount":0,"warningCount":0}},"src/components/constants/api_config.js":{"hash":"3268da5b7203f142fc6b45678a1bfc28","res":{"results":[{"filePath":"/home/milestep/code/todo-react-client/src/components/constants/api_config.js","messages":[],"errorCount":0,"warningCount":0}],"errorCount":0,"warningCount":0}},"src/components/layouts/not_exists.js":{"hash":"f35b13e2e4cd19aeb16c48f3959e9c5f","res":{"results":[{"filePath":"/home/milestep/code/todo-react-client/src/components/layouts/not_exists.js","messages":[],"errorCount":0,"warningCount":0}],"errorCount":0,"warningCount":0}},"src/components/layouts/navbar.js":{"hash":"03c3de29ed9b33ead975a9ec9b3e090c","res":{"results":[{"filePath":"/home/milestep/code/todo-react-client/src/components/layouts/navbar.js","messages":[],"errorCount":0,"warningCount":0}],"errorCount":0,"warningCount":0}},"src/components/users/email_confirmation.js":{"hash":"bd9b0d39c6c31cc68d493a367aee6c2d","res":{"results":[{"filePath":"/home/milestep/code/todo-react-client/src/components/users/email_confirmation.js","messages":[],"errorCount":0,"warningCount":0}],"errorCount":0,"warningCount":0}},"src/components/layouts/alert.js":{"hash":"2742c136d7a1260a663ffacf7f6c6701","res":{"results":[{"filePath":"/home/milestep/code/todo-react-client/src/components/layouts/alert.js","messages":[],"errorCount":0,"warningCount":0}],"errorCount":0,"warningCount":0}},"src/reducers/alerts.js":{"hash":"abf277921b737f563276803953271ac5","res":{"results":[{"filePath":"/home/milestep/code/todo-react-client/src/reducers/alerts.js","messages":[],"errorCount":0,"warningCount":0}],"errorCount":0,"warningCount":0}},"src/components/layouts/notification.js":{"hash":"2b36697a75b29d4f93919b914be29dac","res":{"results":[{"filePath":"/home/milestep/code/todo-react-client/src/components/layouts/notification.js","messages":[],"errorCount":0,"warningCount":0}],"errorCount":0,"warningCount":0}},"src/reducers/notifications.js":{"hash":"60e7a0a415f7966236a989b1b3b23191","res":{"results":[{"filePath":"/home/milestep/code/todo-react-client/src/reducers/notifications.js","messages":[],"errorCount":0,"warningCount":0}],"errorCount":0,"warningCount":0}},"src/actions/notifications.js":{"hash":"55c5ba6e28197b4319b127dda46ef00f","res":{"results":[{"filePath":"/home/milestep/code/todo-react-client/src/actions/notifications.js","messages":[],"errorCount":0,"warningCount":0}],"errorCount":0,"warningCount":0}},"src/components/middlewares/notifications.js":{"hash":"9b9ae00256b2dede02b5e76fbf6afad7","res":{"results":[{"filePath":"/home/milestep/code/todo-react-client/src/components/middlewares/notifications.js","messages":[],"errorCount":0,"warningCount":0}],"errorCount":0,"warningCount":0}},"src/components/middlewares/tasks.js":{"hash":"039485f195eda48e96b54d0af2030515","res":{"results":[{"filePath":"/home/milestep/code/todo-react-client/src/components/middlewares/tasks.js","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'SORT_TASKS' is defined but never used.","line":1,"column":10,"nodeType":"Identifier","source":"import { SORT_TASKS } from '../constants/action_types';"}],"errorCount":0,"warningCount":1,"source":"import { SORT_TASKS } from '../constants/action_types';\n\n\nexport function sortTasks () {\n  return function(dispatch) {\n    // dispatch({ type: SORT_TASKS, body: 'bfgfd' })\n    console.log('11111111');\n  }\n}"}],"errorCount":0,"warningCount":1}},"src/components/middlewares/sorted_tasks.js":{"hash":"f8d7b8a0f83912a5d4c2fa4a3235c592","res":{"results":[{"filePath":"/home/milestep/code/todo-react-client/src/components/middlewares/sorted_tasks.js","messages":[],"errorCount":0,"warningCount":0}],"errorCount":0,"warningCount":0}}}